stages:
  - test
  - build
  - package
  - release
  - deploy


include:
   - template: Security/SAST.gitlab-ci.yml
   - template: Code-Quality.gitlab-ci.yml
   - template: Jobs/Dependency-Scanning.gitlab-ci.yml
   - template: Jobs/Secret-Detection.gitlab-ci.yml
  #  - template: DAST.gitlab-ci.yml


## Testing Stage ##
code_quality:
  stage: test
  tags:
    - docker-ci-auto-cq
  artifacts:
    paths:
      - gl-code-quality-report.json
    reports:
      codequality: gl-code-quality-report.json
  when: always


gemnasium-dependency_scanning:
  tags:
  - docker_crm_test
  stage: test
  variables:
    CI_DEBUG_TRACE: "true"
  artifacts:
    paths:
    # - gl-sbom-*.cdx.json
    - gl-dependency-scanning-report.json
    expire_in: 1 week

 
sast:
  stage: test
  tags:
    - docker-ci-auto
  artifacts:
    name: sast
    paths:
      - gl-sast-report.json
    reports:
      sast: gl-sast-report.json
 
secret_detection:
  stage: test
  tags:
    - docker-ci-auto
  variables:
    SECRET_DETECTION_HISTORIC_SCAN: "true"
  artifacts:
    paths:
      - gl-secret_detection-report.json



## Build Stage ##
build-code:
  stage: build
  tags:
    - shell-ci-auto
  script:
    - echo "==== Project Building Started ====="
    - mvn clean install
    - echo "code build Successfull..."
    - ls
  artifacts:
    paths:
      - target/*.war

## Package Artifact
package-artifact:
  stage: package
  tags:
    - shell-ci-auto
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${CI_PROJECT_DIR}/target/*.war "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/my_package/0.0.1/onlinebookstore.war"'
  needs: [build-code]

## Release Using Git Tag
webapp-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - docker-ci-auto
  script:
    - echo "Webapp release job"
  release:
    tag_name: 'v${CI_COMMIT_TAG}'
    description: 'Android release v${CI_COMMIT_TAG}'

## Deployment on dev
deploy-dev:
  stage: deploy
  tags:
    - shell-ci-auto
  variables:
        ENV: "dev"
        VERSION: "$CI_PIPELINE_ID"
        DEV_PATH: "/opt/tomcat/webapps"
  script:
    - echo "Deployment for Dev Environment"
    - cp CI_PROJECT_DIR/target/*.war $DEV_PATH
  environment:
    name: $ENV
  needs:
    - build-code
  when: manual

## Deployment on stage
deploy-stage:
  stage: deploy
  tags:
    - shell-ci-auto
  variables:
        ENV: "stage"
        VERSION: "$CI_PIPELINE_ID"
        STAGE_PATH: "/mnt/volume/stage-env/webapps"
  script:
    - echo "Deployment for Dev Environment"
    - cp CI_PROJECT_DIR/target/*.war $STAGE_PATH
  environment:
    name: $ENV
  needs:
    - build-code
  when: manual

## Deployment on prod
deploy-production:
  stage: deploy
  tags:
    - shell-ci-auto
  variables:
        ENV: "prod"
        VERSION: "$CI_PIPELINE_ID"
        PROD_PATH: "/mnt/volume/stage-env/webapps"
  script:
    - echo "Deployment for Dev Environment"
    - cp CI_PROJECT_DIR/target/*.war $PROD_PATH
  environment:
    name: $ENV
  needs:
    - build-code
  when: manual
  
  
